// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sdk_orderer.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
//const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SdkOrdererRequest struct {
	Payload              string   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Sign                 string   `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	AppId                string   `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SdkOrdererRequest) Reset()         { *m = SdkOrdererRequest{} }
func (m *SdkOrdererRequest) String() string { return proto.CompactTextString(m) }
func (*SdkOrdererRequest) ProtoMessage()    {}
func (*SdkOrdererRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41a034d0669bae31, []int{0}
}

func (m *SdkOrdererRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SdkOrdererRequest.Unmarshal(m, b)
}
func (m *SdkOrdererRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SdkOrdererRequest.Marshal(b, m, deterministic)
}
func (m *SdkOrdererRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SdkOrdererRequest.Merge(m, src)
}
func (m *SdkOrdererRequest) XXX_Size() int {
	return xxx_messageInfo_SdkOrdererRequest.Size(m)
}
func (m *SdkOrdererRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SdkOrdererRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SdkOrdererRequest proto.InternalMessageInfo

func (m *SdkOrdererRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SdkOrdererRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *SdkOrdererRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func init() {
	proto.RegisterType((*SdkOrdererRequest)(nil), "api.SdkOrdererRequest")
}

func init() { proto.RegisterFile("sdk_orderer.proto", fileDescriptor_41a034d0669bae31) }

var fileDescriptor_41a034d0669bae31 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xce, 0xc1, 0x8a, 0xc2, 0x30,
	0x10, 0x80, 0xe1, 0xed, 0x76, 0xb7, 0xcb, 0x06, 0x96, 0xb5, 0x01, 0x25, 0xf4, 0x24, 0x3d, 0x79,
	0xea, 0x41, 0x6f, 0xbe, 0x81, 0xa7, 0x42, 0xea, 0xc1, 0x5b, 0x19, 0x93, 0x41, 0x42, 0xdb, 0x64,
	0x4c, 0xaa, 0xd0, 0xb7, 0x17, 0x52, 0x04, 0xc1, 0xdb, 0xcc, 0xc7, 0x30, 0xfc, 0x2c, 0x0f, 0xba,
	0x6b, 0x9d, 0xd7, 0xe8, 0xd1, 0x57, 0xe4, 0xdd, 0xe8, 0x78, 0x0a, 0x64, 0x8a, 0x85, 0x27, 0xd5,
	0x2a, 0x37, 0x0c, 0xce, 0xce, 0x5c, 0x9e, 0x58, 0xde, 0xe8, 0xae, 0x9e, 0x4f, 0x25, 0x5e, 0x6f,
	0x18, 0x46, 0x2e, 0xd8, 0x0f, 0xc1, 0xd4, 0x3b, 0xd0, 0x22, 0x59, 0x27, 0x9b, 0x5f, 0xf9, 0x5c,
	0x39, 0x67, 0x5f, 0xc1, 0x5c, 0xac, 0xf8, 0x8c, 0x1c, 0x67, 0xbe, 0x64, 0x19, 0x10, 0xb5, 0x46,
	0x8b, 0x34, 0xea, 0x37, 0x10, 0x1d, 0xf4, 0xb6, 0x7e, 0xfd, 0xdc, 0xa0, 0xbf, 0x1b, 0x85, 0x7c,
	0xcf, 0xfe, 0x03, 0x5a, 0x7d, 0xf4, 0x60, 0x03, 0xa8, 0xd1, 0x38, 0xcb, 0x57, 0x15, 0x90, 0xa9,
	0xde, 0x22, 0x8a, 0xbf, 0xe8, 0x92, 0x94, 0x44, 0xea, 0xa7, 0xf2, 0xe3, 0x9c, 0xc5, 0xe2, 0xdd,
	0x23, 0x00, 0x00, 0xff, 0xff, 0x70, 0x41, 0x70, 0x56, 0xdd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SdkOrdererServiceClient is the client API for SdkOrdererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SdkOrdererServiceClient interface {
	// 将交易发给order排序落地
	SendTransaction(ctx context.Context, in *SdkOrdererRequest, opts ...grpc.CallOption) (*RpcReply, error)
}

type sdkOrdererServiceClient struct {
	cc *grpc.ClientConn
}

func NewSdkOrdererServiceClient(cc *grpc.ClientConn) SdkOrdererServiceClient {
	return &sdkOrdererServiceClient{cc}
}

func (c *sdkOrdererServiceClient) SendTransaction(ctx context.Context, in *SdkOrdererRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/api.SdkOrdererService/sendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkOrdererServiceServer is the server API for SdkOrdererService service.
type SdkOrdererServiceServer interface {
	// 将交易发给order排序落地
	SendTransaction(context.Context, *SdkOrdererRequest) (*RpcReply, error)
}

// UnimplementedSdkOrdererServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSdkOrdererServiceServer struct {
}

func (*UnimplementedSdkOrdererServiceServer) SendTransaction(ctx context.Context, req *SdkOrdererRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}

func RegisterSdkOrdererServiceServer(s *grpc.Server, srv SdkOrdererServiceServer) {
	s.RegisterService(&_SdkOrdererService_serviceDesc, srv)
}

func _SdkOrdererService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOrdererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkOrdererServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SdkOrdererService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkOrdererServiceServer).SendTransaction(ctx, req.(*SdkOrdererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SdkOrdererService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SdkOrdererService",
	HandlerType: (*SdkOrdererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendTransaction",
			Handler:    _SdkOrdererService_SendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdk_orderer.proto",
}
